generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["accounts", "activity", "classroom", "files", "follow", "forums", "notifications", "sessions", "users"]
}

model User {
  id                     String         @id @default(cuid())
  userId                 String?
  username               String         @unique
  email                  String?        @unique
  emailVerified          DateTime?
  userImage              String?
  facebook               String?
  github                 String?
  instagram              String?
  twitter                String?
  password               String?
  emailVerificationToken String?
  isEmailVerified        Boolean        @default(false)
  role                   String         @default("user")
  isStudent              Boolean        @default(true)
  accounts               Account[]
  teacherClassroms       Classroom[]    @relation("TeacherClassrooms")
  following              Follow[]       @relation("Followers")
  follower               Follow[]       @relation("Followings")
  forums                 Forum[]
  comments               ForumComment[]
  forumLikes             ForumLike[]
  sessions               Session[]
  classrooms             Classroom[]    @relation("StudentClassrooms")
classroomAnnouncement     ClassroomAnnouncement[]   @relation("TeacherStudentAnnouncement")
  @@unique([id, username, userImage, facebook, twitter, github, instagram])
  @@unique([id, username, userImage])
  @@unique([id, userImage])
  @@schema("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@schema("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("sessions")
}

model Forum {
  id             String         @id @default(cuid())
  userId         String
  authorUsername String
  forumImage     String?
  title          String
  caption        String?
  createdAt      DateTime       @default(now())
  titleId        String         @unique
  userImage      String
  content        Json?
  user           User           @relation(fields: [userId, authorUsername, userImage], references: [id, username, userImage], onDelete: Cascade)
  comments       ForumComment[]
  forumLikes     ForumLike[]

  @@schema("forums")
}

model ForumLike {
  id      String @id @default(cuid())
  userId  String
  forumId String
  forums  Forum  @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@schema("forums")
}

model ForumComment {
  id        String   @id @default(cuid())
  comment   String
  userId    String
  userImage String
  username  String
  forumId   String
  createdAt DateTime @default(now())
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId, userImage, username], references: [id, userImage, username], onDelete: Cascade)

  @@schema("forums")
}

model Follow {
  id                 String   @id @default(cuid())
  followerId         String
  followingId        String
  createdAt          DateTime @default(now())
  userFollowerImage  String
  userFollowingImage String
  follower           User     @relation("Followers", fields: [followerId, userFollowerImage], references: [id, userImage], onDelete: Cascade)
  following          User     @relation("Followings", fields: [followingId, userFollowingImage], references: [id, userImage], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@schema("follow")
}

model Notifications {
  id            String   @id @default(cuid())
  userId        String
  type          String
  from          String
  resourceId    String
  isRead        Boolean  @default(false)
  fromUserImage String
  createdAt     DateTime @default(now())
  fromUsername  String

  @@schema("notifications")
}

model Classroom {
  id           String                  @id @default(cuid())
  teacherId    String
  className    String
  sectionName  String
  teacherImage String
  teacherName  String
  code         String                  @unique
  activity     Activity[]              @relation("ClassroomActivities")
  teacher      User                    @relation("TeacherClassrooms", fields: [teacherName, teacherId, teacherImage], references: [username, id, userImage], onDelete: Cascade)
  students     User[]                  @relation("StudentClassrooms")
  announcement ClassroomAnnouncement[] @relation("ClassroomAnnouncement")
  createdAt    DateTime                @default(now())

  @@schema("classroom")
}

model Activity {
  id          String    @id @default(cuid())
  teacherId   String
  classroomId String
  title       String
  instruction String
  fileId      String?
  createdAt   DateTime  @default(now())
  classroom   Classroom @relation("ClassroomActivities", fields: [classroomId], references: [id])
  attachFile  File?     @relation(fields: [fileId], references: [id])

  @@schema("classroom")
}

model File {
  id        String     @id @default(cuid())
  url       String
  fileName  String
  mimeType  String
  size      Int
  createdAt DateTime   @default(now())
  activity  Activity[]

  @@schema("classroom")
}

model ClassroomAnnouncement {
  id          String    @id @default(cuid())
  text        String
  image       String?
  classroomId String
  userName     String
  userImage     String
  userId        String
  user          User      @relation("TeacherStudentAnnouncement",fields: [userId,userImage,userName], references: [id,userImage,username])
  classroom   Classroom @relation("ClassroomAnnouncement", fields: [classroomId], references: [id])
createdAt DateTime   @default(now())
  @@schema("classroom")
}
